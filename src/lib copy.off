use pyo3::prelude::*;
#[macro_use] extern crate juniper;

use juniper::{FieldResult, Variables, EmptyMutation};

#[derive(GraphQLEnum, Clone, Copy)]
enum Episode {
    NewHope,
    Empire,
    Jedi,
}

struct Query;

graphql_object!(Query: Ctx |&self| {
    field favoriteEpisode(&executor) -> FieldResult<Episode> {
        // Use the special &executor argument to fetch our fav episode.
        Ok(executor.context().0)
    }
});

// Arbitrary context data.
struct Ctx(Episode);

// A root schema consists of a query and a mutation.
// Request queries can be executed against a RootNode.
type Schema = juniper::RootNode<'static, Query, EmptyMutation<Ctx>>;

#[pyfunction]
fn boom_town(a: usize) -> PyResult<String>  {
    // Create a context object.
    let ctx = Ctx(Episode::NewHope);

    // Run the executor.
    let (res, _errors) = juniper::execute(
        "query { favoriteEpisode }",
        None,
        &Schema::new(Query, EmptyMutation::new()),
        &Variables::new(),
        &ctx,
    ).unwrap();
    Ok(res.as_object_value().unwrap().get_field_value("favoriteEpisode").unwrap().as_string_value().unwrap().to_string())
    // Ensure the value matches.
    // assert_eq!(
    //     res.as_object_value().unwrap().get_field_value("favoriteEpisode").unwrap().as_string_value().unwrap(),
    //     "NEW_HOPE",
    // );
}

/// Formats the sum of two numbers as string.
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -> PyResult<String> {
    Ok((a * b).to_string())
}

/// A Python module implemented in Rust.
#[pymodule]
fn gqltest(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    m.add_function(wrap_pyfunction!(boom_town, m)?)?;
    Ok(())
}


